{"version":3,"sources":["aws-config.js","ImageDetect.js","VideoDetect.js","App.js","index.js"],"names":["AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","rekognition","Rekognition","apiVersion","ImageDetect","S3","useState","image","setImage","imageData","setImageData","result","setResult","loading","setLoading","useEffect","reader","FileReader","readAsDataURL","onload","handleClick","readAsArrayBuffer","params","Image","Bytes","recognizeCelebrities","err","data","console","log","alert","className","type","id","onChange","e","target","files","accept","htmlFor","name","src","width","onClick","CelebrityFaces","map","key","Id","Name","MatchConfidence","renderSuccessResult","UnrecognizedFaces","length","renderFailResult","VideoDetect","video","setVideo","App","basename","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"oNAGAA,IAAIC,OAAOC,OAAS,YACpBF,IAAIC,OAAOE,YAAc,IAAIH,IAAII,2BAA2B,CACxDC,eAAgB,mDAGb,IAAIC,EAAc,IAAIN,IAAIO,YAAY,CAAEC,WAAY,eCmH5CC,GDjHC,IAAIT,IAAIU,GAAG,CAAEF,WAAY,eCPrB,WAAO,IAAD,EACIG,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEYF,mBAAS,IAFrB,mBAEfG,EAFe,KAEJC,EAFI,OAGMJ,mBAAS,CAAC,KAHhB,mBAGfK,EAHe,KAGPC,EAHO,OAIQN,oBAAS,GAJjB,mBAIfO,EAJe,KAINC,EAJM,KAWtBC,oBAAU,WACN,GAAIR,EAAO,CACP,IAAIS,EAAS,IAAIC,WACjBD,EAAOE,cAAcX,GACrBS,EAAOG,OAAS,WACZT,EAAaM,EAAOL,WAG7B,CAACJ,EAAOE,IAEX,IAAMW,EAAc,WAChB,IAAIJ,EAAS,IAAIC,WAEZV,GAKLS,EAAOK,kBAAkBd,GAGzBS,EAAOG,OAAS,WACZ,IAAIG,EAAS,CACTC,MAAO,CACHC,MAAOR,EAAOL,SAGtBG,GAAW,GACXb,EAAYwB,qBAAqBH,EAAQ,SAACI,EAAKC,GACvCD,EAAKE,QAAQC,IAAIH,IAEjBd,EAAUe,GACVb,GAAW,QAlBnBgB,MAAM,6BAoEd,OACI,6BACI,gDACA,yBAAKC,UAAU,eACX,2BACIC,KAAK,OACLD,UAAU,oBACVE,GAAG,aACHC,SA/FK,SAAAC,GACjB3B,EAAS2B,EAAEC,OAAOC,MAAM,IACxBT,QAAQC,IAAI,aAAcM,EAAEC,OAAOC,MAAM,KA8F7BC,OAAO,YAEX,2BAAOP,UAAU,oBAAoBQ,QAAQ,cACxChC,EAAMiC,MAAQ,gBAIvB,yBAAKT,UAAU,eACX,yBAAKU,IAAKhC,EAAWsB,UAAU,eAAeW,MAAO,MACrD,8BA7DQ,IAAZ7B,GAAqBN,EAEjB,4BACIwB,UAAU,+BACVY,QAASvB,GAFb,WAOe,IAAZP,GAAoBN,EAEvB,4BAAQwB,UAAU,yCAAlB,oBAFD,GASiB,WACxB,GAAIpB,EAAOiC,eACP,OAAOjC,EAAOiC,eAAeC,IAAI,SAAAV,GAAC,OAC9B,yBACIW,IAAKX,EAAEY,GACPhB,UAAU,0DAEV,gCAASI,EAAEa,MACX,uCAAab,EAAEc,gBAAf,SAsCPC,GAhCgB,WACrB,GAAIvC,EAAOwC,mBAAqBxC,EAAOwC,kBAAkBC,OAAS,EAC9D,OACI,yBAAKrB,UAAU,sBACX,gCAASpB,EAAOwC,kBAAkBC,QADtC,6BA8BHC,MCxFEC,EAvBK,WAAO,IAAD,EACIhD,mBAAS,IADb,mBACfiD,EADe,KACRC,EADQ,KAOtB,OACI,yBAAKzB,UAAU,eACX,2BACIC,KAAK,OACLD,UAAU,oBACVE,GAAG,aACHC,SAVS,SAAAC,GACjBqB,EAASrB,EAAEC,OAAOC,MAAM,KAUhBC,OAAO,YAEX,2BAAOP,UAAU,oBAAoBQ,QAAQ,cACxCgB,EAAMf,MAAQ,iBCJhBiB,EAdH,WACR,OACI,kBAAC,IAAD,CAAYC,SAAS,KACjB,yBAAK3B,UAAU,aACX,wBAAIA,UAAU,gBAAd,oBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4B,KAAK,IAAIC,OAAK,EAACC,UAAWzD,IACjC,kBAAC,IAAD,CAAOuD,KAAK,SAASC,OAAK,EAACC,UAAWP,QCT1DQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1564fc97.chunk.js","sourcesContent":["import AWS from \"aws-sdk\";\r\n\r\n//Role Name: Cognito_Rekonition2Unauth_Role\r\nAWS.config.region = \"us-east-1\"; // Region\r\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n    IdentityPoolId: \"us-east-1:cc9fadcf-503b-41f1-a7c1-7f1da0b9a014\"\r\n});\r\n\r\nexport let rekognition = new AWS.Rekognition({ apiVersion: \"2016-06-27\" });\r\n\r\nexport let s3 = new AWS.S3({ apiVersion: \"2006-03-01\" });\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { rekognition } from \"./aws-config\";\r\n\r\nconst ImageDetect = () => {\r\n    const [image, setImage] = useState(\"\"); //image\r\n    const [imageData, setImageData] = useState(\"\"); //Data URL of image, use this to preview image\r\n    const [result, setResult] = useState([{}]); //result from API call\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleChange = e => {\r\n        setImage(e.target.files[0]);\r\n        console.log(\"Image Info\", e.target.files[0]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (image) {\r\n            let reader = new FileReader();\r\n            reader.readAsDataURL(image);\r\n            reader.onload = () => {\r\n                setImageData(reader.result);\r\n            };\r\n        }\r\n    }, [image, imageData]);\r\n\r\n    const handleClick = () => {\r\n        let reader = new FileReader();\r\n\r\n        if (!image) {\r\n            alert(\"You need to upload Image\");\r\n            return;\r\n        }\r\n\r\n        reader.readAsArrayBuffer(image);\r\n\r\n        //process image and send request after image is loaded to FileReader\r\n        reader.onload = () => {\r\n            let params = {\r\n                Image: {\r\n                    Bytes: reader.result\r\n                }\r\n            };\r\n            setLoading(true);\r\n            rekognition.recognizeCelebrities(params, (err, data) => {\r\n                if (err) console.log(err);\r\n                else {\r\n                    setResult(data);\r\n                    setLoading(false);\r\n                }\r\n            });\r\n        };\r\n    };\r\n\r\n    const RenderLoadingButton = () => {\r\n        if (loading === false && image) {\r\n            return (\r\n                <button\r\n                    className=\"btn btn-primary mx-auto mb-4\"\r\n                    onClick={handleClick}\r\n                >\r\n                    Detect\r\n                </button>\r\n            );\r\n        } else if (loading === true && image) {\r\n            return (\r\n                <button className=\"btn btn-primary mx-auto mb-4 disabled\">\r\n                    Loading ...\r\n                </button>\r\n            );\r\n        }\r\n    };\r\n\r\n    const renderSuccessResult = () => {\r\n        if (result.CelebrityFaces) {\r\n            return result.CelebrityFaces.map(e => (\r\n                <div\r\n                    key={e.Id}\r\n                    className=\"d-flex justify-content-around alert alert-success mx-1\"\r\n                >\r\n                    <strong>{e.Name}</strong>\r\n                    <div>Match: {e.MatchConfidence} %</div>\r\n                </div>\r\n            ));\r\n        }\r\n    };\r\n\r\n    const renderFailResult = () => {\r\n        if (result.UnrecognizedFaces && result.UnrecognizedFaces.length > 0) {\r\n            return (\r\n                <div className=\"alert alert-danger\">\r\n                    <strong>{result.UnrecognizedFaces.length}</strong> faces can\r\n                    not regconized\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <p>Upload any image </p>\r\n            <div className=\"custom-file\">\r\n                <input\r\n                    type=\"file\"\r\n                    className=\"custom-file-input\"\r\n                    id=\"customFile\"\r\n                    onChange={handleChange}\r\n                    accept=\"image/*\"\r\n                />\r\n                <label className=\"custom-file-label\" htmlFor=\"customFile\">\r\n                    {image.name || \"Choose file\"}\r\n                </label>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n                <img src={imageData} className=\"mx-auto my-4\" width={450} />\r\n                <br />\r\n                {RenderLoadingButton()}\r\n            </div>\r\n            {renderSuccessResult()}\r\n            {renderFailResult()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageDetect;\r\n","import React, { useState } from \"react\";\r\nimport { rekognition } from \"./aws-config\";\r\n\r\n//1: Upload to S3\r\n//2: Regconition read data from S3\r\n//3: Detect .....\r\n\r\nconst VideoDetect = () => {\r\n    const [video, setVideo] = useState(\"\"); //video\r\n\r\n    const handleChange = e => {\r\n        setVideo(e.target.files[0]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"custom-file\">\r\n            <input\r\n                type=\"file\"\r\n                className=\"custom-file-input\"\r\n                id=\"customFile\"\r\n                onChange={handleChange}\r\n                accept=\"image/*\"\r\n            />\r\n            <label className=\"custom-file-label\" htmlFor=\"customFile\">\r\n                {video.name || \"Choose file\"}\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoDetect;\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nimport ImageDetect from \"./ImageDetect\";\r\nimport VideoDetect from \"./VideoDetect\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter basename=\"/\">\r\n            <div className=\"container\">\r\n                <h1 className=\"mx-auto my-4\">Face Regkonition</h1>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={ImageDetect} />\r\n                    <Route path=\"/video\" exact component={VideoDetect} />\r\n                </Switch>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}